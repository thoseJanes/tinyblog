// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: aiservice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_GenerateTitleAndTag_FullMethodName = "/v1.AIService/generateTitleAndTag"
	AIService_PolishContent_FullMethodName       = "/v1.AIService/polishContent"
	AIService_SearchPosts_FullMethodName         = "/v1.AIService/searchPosts"
	AIService_SummaryContent_FullMethodName      = "/v1.AIService/summaryContent"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIServiceClient interface {
	GenerateTitleAndTag(ctx context.Context, in *PromptContentRequest, opts ...grpc.CallOption) (*GenerateTitleAndTagResponse, error)
	PolishContent(ctx context.Context, in *PromptContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PolishContentResponse], error)
	SearchPosts(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*SearchPostsResponse, error)
	SummaryContent(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummaryContentResponse], error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) GenerateTitleAndTag(ctx context.Context, in *PromptContentRequest, opts ...grpc.CallOption) (*GenerateTitleAndTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTitleAndTagResponse)
	err := c.cc.Invoke(ctx, AIService_GenerateTitleAndTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) PolishContent(ctx context.Context, in *PromptContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PolishContentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIService_ServiceDesc.Streams[0], AIService_PolishContent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PromptContentRequest, PolishContentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_PolishContentClient = grpc.ServerStreamingClient[PolishContentResponse]

func (c *aIServiceClient) SearchPosts(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*SearchPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPostsResponse)
	err := c.cc.Invoke(ctx, AIService_SearchPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) SummaryContent(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummaryContentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIService_ServiceDesc.Streams[1], AIService_SummaryContent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ContentRequest, SummaryContentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_SummaryContentClient = grpc.ServerStreamingClient[SummaryContentResponse]

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
type AIServiceServer interface {
	GenerateTitleAndTag(context.Context, *PromptContentRequest) (*GenerateTitleAndTagResponse, error)
	PolishContent(*PromptContentRequest, grpc.ServerStreamingServer[PolishContentResponse]) error
	SearchPosts(context.Context, *PromptRequest) (*SearchPostsResponse, error)
	SummaryContent(*ContentRequest, grpc.ServerStreamingServer[SummaryContentResponse]) error
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) GenerateTitleAndTag(context.Context, *PromptContentRequest) (*GenerateTitleAndTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTitleAndTag not implemented")
}
func (UnimplementedAIServiceServer) PolishContent(*PromptContentRequest, grpc.ServerStreamingServer[PolishContentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PolishContent not implemented")
}
func (UnimplementedAIServiceServer) SearchPosts(context.Context, *PromptRequest) (*SearchPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPosts not implemented")
}
func (UnimplementedAIServiceServer) SummaryContent(*ContentRequest, grpc.ServerStreamingServer[SummaryContentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SummaryContent not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_GenerateTitleAndTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateTitleAndTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateTitleAndTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateTitleAndTag(ctx, req.(*PromptContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_PolishContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PromptContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIServiceServer).PolishContent(m, &grpc.GenericServerStream[PromptContentRequest, PolishContentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_PolishContentServer = grpc.ServerStreamingServer[PolishContentResponse]

func _AIService_SearchPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).SearchPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_SearchPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).SearchPosts(ctx, req.(*PromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_SummaryContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIServiceServer).SummaryContent(m, &grpc.GenericServerStream[ContentRequest, SummaryContentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_SummaryContentServer = grpc.ServerStreamingServer[SummaryContentResponse]

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "generateTitleAndTag",
			Handler:    _AIService_GenerateTitleAndTag_Handler,
		},
		{
			MethodName: "searchPosts",
			Handler:    _AIService_SearchPosts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "polishContent",
			Handler:       _AIService_PolishContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "summaryContent",
			Handler:       _AIService_SummaryContent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aiservice.proto",
}
